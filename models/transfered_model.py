from models.model import Model
from tensorflow.keras import Sequential, layers, models
from tensorflow.keras.layers.experimental.preprocessing import Rescaling
from tensorflow.keras.optimizers import RMSprop, Adam

# class TransferedModel(Model):
#     def _define_model(self, input_shape, categories_count):
#         # Your code goes here
#         # you have to initialize self.model to a keras model
#         # load your basic model with keras's load_model function
#         # freeze the weights of the loaded model to make sure the training doesn't affect them
#         # (check the number of total params, trainable params and non-trainable params in your summary generated by train_transfer.py)
#         # use this model by removing the last layer, adding dense layers and an output layer
#         pass
    
#     def _compile_model(self):
#         # Your code goes here
#         # you have to compile the keras model, similar to the example in the writeup
#         pass

class TransferedModel(Model):
    def _define_model(self, input_shape, categories_count):
        # Load the basic model
        basic_model = models.load_model('basic_model_20_epochs_timestamp_1708479017.keras')

        # Freeze the weights of the loaded model
        for layer in basic_model.layers:
            layer.trainable = False

        # Remove the last layer of the basic model
        basic_model.pop()

        # Add layers to the model
        self.model = Sequential([
            basic_model,
            layers.Dense(128, activation='relu'),
            layers.Dense(categories_count, activation='softmax')
        ])

    def _compile_model(self):
        # Compile the Keras model
        self.model.compile(
            optimizer=RMSprop(learning_rate=0.001),
            loss='categorical_crossentropy',
            metrics=['accuracy']
        )
